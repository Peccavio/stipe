// 'the_grid' determines width by taking column count, calculates gutter count
// default setting for grid is ``em`` this is specified in ``_config.scss``

@mixin the_grid($col_count, $col_width, $grid_uom, $grid_padding_lr, $grid_padding_tb, $grid_border, $grid_child, $col_gutter, $grid_align) {
	
	$col_gutter_width: ($col_count - 1) * $col_gutter + ($col_count * $col_width);
	
	@include grid_placement($grid_align, $grid_uom, $grid_child, $margin: $col_gutter / 2);
	
	@if $grid_uom == em {
		@if $grid_border > 0 {
			border: #{$grid_border}px $standard_border_style $border_color;
		}
		
		@if $grid_padding_lr > 0 {
			padding: {
				left: #{$grid_padding_lr / $em}em;
				right: #{$grid_padding_lr / $em}em;
			}
		}
		@if $grid_padding_tb > 0 {
			padding: {
				top: #{$grid_padding_tb / $em}em;
				bottom: #{$grid_padding_tb / $em}em;
			}
		}
		$grid_width: #{$col_gutter_width / $em}em;
		width: $grid_width;
		
		// this query only happens when using ems as spacial values
		// the rule is that at a breakpoint, all hard values are converted to percentages
		
		// @media only screen and (max-width: 1024px) {
		// 	$grid_width: $col_gutter_width / $grid_960;
		// 	width: $grid_width;
		// 	background: blue;
		// }
		
		// fallback for unsupported browsers
		$grid_width_fallback: $col_gutter_width - (($grid_padding_lr * 2) + ($grid_border * 2));
		
		@if $grid_width_fallback < $col_gutter_width {
			.ie7 & {
		   	// width: #{$grid_width_fallback / $em}em;
		   	width: #{$grid_width_fallback}px;
		   }
		}
	}	

	@else if $grid_uom == percent {
		@if $grid_border > 0 {
			border: #{$grid_border}px $standard_border_style $border_color;
		}
		
		$grid_width: $col_gutter_width / $grid_960;
		@if $grid_padding_lr > 0 {
			padding: {
				left: $grid_padding_lr / $grid_960;
				right: $grid_padding_lr / $grid_960;
			}
		}
		@if $grid_padding_tb > 0 {
			padding: {
				top: $grid_padding_tb / $grid_960;
				bottom: $grid_padding_tb / $grid_960;
			}
		}
		width: $grid_width;
		
		// fallback for unsupported browsers
		$grid_width_fallback: $col_gutter_width - (($grid_padding_lr * 2) + ($grid_border * 2));
		
		@if $grid_width_fallback < $col_gutter_width {
			.ie7 & {
		   	width: $grid_width_fallback / $grid_960;
		   }
		}
	}
	@else if $grid_uom == combo {
		$grid_width: $col_gutter_width / $grid_960;
		@if $grid_padding_lr > 0 {
			padding: {
				left: #{$grid_padding_lr / $em}em;
				right: #{$grid_padding_lr / $em}em;
			}
		}
		@if $grid_padding_tb > 0 {
			padding: {
				top: #{$grid_padding_tb / $em}em;
				bottom: #{$grid_padding_tb / $em}em;
			}
		}
		width: $grid_width;
		
		// fallback for unsupported browsers
		$grid_width_fallback: $col_gutter_width - (($grid_padding_lr * 2) + ($grid_border * 2));
		
		@if $grid_width_fallback < $col_gutter_width {
			.ie7 & {
		   	width: $grid_width_fallback / $grid_960;
		   }
		}
	}
}
